{"ast":null,"code":"import _defineProperty from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/lma/SoPra/sopra-fs19-client/src/components/login/Login.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport Link from \"react-router-dom/es/Link\";\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar Login =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Login, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function Login() {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this));\n\n    _this.login = function () {\n      //changed from users to login according to mapping in backend\n      fetch(\"\".concat(getDomain(), \"/login\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: _this.state.username,\n          password: _this.state.password\n        })\n      }).then(function (response) {\n        if (response.status === 200) {\n          var dbuser = response.json();\n          var user = new User(dbuser); // store the token into the local storage, id can't be set (get after?)\n\n          localStorage.setItem(\"token\", user.token);\n          localStorage.setItem(\"id\", user.id);\n          localStorage.setItem(\"id2\", dbuser.id);\n          alert(\"You are logged-in.\");\n\n          _this.props.history.push('game/dashboard');\n        } else {\n          alert(\"Login failed.\");\n        }\n      }).then(function (id) {\n        fetch(\"\".concat(getDomain(), \"/users/\") + id, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          }\n        }).then(function (data) {\n          console.log('Req succ', data);\n\n          _this.setState({\n            user: data\n          });\n\n          console.log('Got user ', _this.state.user);\n          localStorage.setItem(\"token\", data.token);\n          localStorage.setItem(\"id\", data.id);\n          var user = _this.state.user;\n\n          _this.props.history.push({\n            pathname: \"/game\",\n            state: {\n              user: user\n            }\n          });\n        }).catch(function (err) {\n          console.log('Req failed!', err);\n        }).catch(function (err) {\n          if (err.message.match(/Failed to fetch/)) {\n            alert(\"The server cannot be reached. Did you start it?\");\n          } else {\n            alert(\"Something went wrong during the login: \".concat(err.message));\n          }\n        });\n      });\n    };\n\n    _this.state = {\n      name: null,\n      username: null\n    };\n    return _this;\n  }\n  /**\n   * HTTP POST request to backend with credentials\n   * Expected answer: credentials accepted or denied\n   */\n\n\n  _createClass(Login, [{\n    key: \"handleInputChange\",\n\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Username\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this2.handleInputChange(\"username\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Password\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this2.handleInputChange(\"password\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: !this.state.username || !this.state.password,\n        width: \"50%\",\n        onClick: function onClick() {\n          _this2.login();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Login\")), React.createElement(Link, {\n        to: \"/register\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Register\"))))));\n    }\n  }]);\n\n  return Login;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/home/lma/SoPra/sopra-fs19-client/src/components/login/Login.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","Link","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Login","login","fetch","method","headers","body","JSON","stringify","username","state","password","then","response","status","dbuser","json","user","localStorage","setItem","token","id","alert","props","history","push","data","console","log","setState","pathname","catch","err","message","match","name","key","value","e","handleInputChange","target","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nimport Link from \"react-router-dom/es/Link\";\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass Login extends React.Component {\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  constructor() {\n    super();\n    this.state = {\n      name: null,\n      username: null\n    };\n  }\n\n  /**\n   * HTTP POST request to backend with credentials\n   * Expected answer: credentials accepted or denied\n   */\n\n  login = () => {\n    //changed from users to login according to mapping in backend\n    fetch(`${getDomain()}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    })\n\n      .then(response => {\n        if (response.status === 200) {\n          var dbuser = response.json();\n          const user = new User(dbuser);\n          // store the token into the local storage, id can't be set (get after?)\n          localStorage.setItem(\"token\", user.token);\n          localStorage.setItem(\"id\", user.id);\n          localStorage.setItem(\"id2\", dbuser.id);\n          \n          alert(\"You are logged-in.\");\n          this.props.history.push('game/dashboard');\n        } else {\n          alert(\"Login failed.\")\n        }\n\n      })\n\n    .then(id =>{\n    fetch(`${getDomain()}/users/` + id, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    })\n        .then(data =>{\n          console.log('Req succ', data);\n          this.setState({user: data});\n          console.log('Got user ', this.state.user);\n          localStorage.setItem(\"token\", data.token);\n          localStorage.setItem(\"id\", data.id);\n          let user = this.state.user;\n          this.props.history.push({pathname:`/game`,\n            state:{user}\n          })\n        })\n        .catch(err =>{\n          console.log('Req failed!', err);\n        })\n\n\n        .catch(err => {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        } else {\n          alert(`Something went wrong during the login: ${err.message}`);\n        }\n      });\n  })};\n\n  /**\n   *  Every time the user enters something in the input field, the state gets updated.\n   * @param key (the key of the state for identifying the field that needs to be updated)\n   * @param value (the value that gets assigned to the identified state key)\n   */\n  handleInputChange(key, value) {\n    // Example: if the key is username, this statement is the equivalent to the following one:\n    // this.setState({'username': value});\n    this.setState({ [key]: value });\n  }\n\n  /**\n   * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n   * Initialization that requires DOM nodes should go here.\n   * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n   * You may call setState() immediately in componentDidMount().\n   * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n   */\n  componentDidMount() {}\n\n  render() {\n    return (\n      <BaseContainer>\n        <FormContainer>\n          <Form>\n            <Label>Username</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange(\"username\", e.target.value);\n              }}\n            />\n            <Label>Password</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange(\"password\", e.target.value);\n              }}\n            />\n            <ButtonContainer>\n              <Button\n                disabled={!this.state.username || !this.state.password}\n                width=\"50%\"\n                onClick={() => {\n                  this.login();\n                }}\n              >\n                Login\n              </Button>\n            </ButtonContainer>\n            <Link to=\"/register\">\n            <ButtonContainer>\n\n              <Button\n                  width=\"50%\"\n              >\n                Register\n              </Button>\n            </ButtonContainer>\n            </Link>\n          </Form>\n        </FormContainer>\n      </BaseContainer>\n    );\n  }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(Login);\n"]},"metadata":{},"sourceType":"module"}