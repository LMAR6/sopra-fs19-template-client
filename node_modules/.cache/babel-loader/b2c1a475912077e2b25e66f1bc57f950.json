{"ast":null,"code":"import _defineProperty from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/lma/SoPra/sopra-fs19-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/lma/SoPra/sopra-fs19-client/src/components/profile/Settings.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 0.2);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 375px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar Settings =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Settings, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function Settings(props) {\n    var _this;\n\n    _classCallCheck(this, Settings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Settings).call(this, props));\n    _this.state = {\n      username: null,\n      userid: null,\n      birthday: null,\n      changedusername: null,\n      changedbirthday: null\n    };\n    return _this;\n  }\n\n  _createClass(Settings, [{\n    key: \"saveSettings\",\n    value: function saveSettings() {\n      var _this2 = this;\n\n      console.log(\"settings:update\", this.state);\n      var path = \"\".concat(getDomain(), \"/users/\") + localStorage.getItem(\"userId\");\n\n      var status = function status(response) {\n        if (response.status === 204) {\n          return Promise.resolve(response);\n        }\n\n        alert(\"Username already taken!\");\n        return Promise.reject(new Error(response.statusText));\n      };\n\n      var str = function str(response) {\n        return response.text();\n      };\n\n      fetch(path, {\n        method: \"PUT\",\n        // mode : 'no-cors',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: localStorage.getItem(\"token\"),\n          id: this.state.userid,\n          username: this.state.newusername,\n          birthday: this.state.newbirthday\n        })\n      }).then(status).then(str).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(data) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return new Promise(function (resolve) {\n                    return setTimeout(resolve, 100);\n                  });\n\n                case 2:\n                  _this2.props.history.push(\"/game/dashboard\");\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (error) {\n        console.log(error);\n      });\n    }\n    /**\n     * HTTP POST request is sent to the backend.\n     * If the request is successful, a new user is returned to the front-end and its token is stored in the localStorage.\n     */\n\n  }, {\n    key: \"settings\",\n    value: function settings() {\n      var _this3 = this;\n\n      fetch(\"\".concat(getDomain(), \"/users\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (returnedUser) {\n        var user = new User(returnedUser); // store the token into the local storage\n\n        localStorage.setItem(\"token\", user.token); // user login successfully worked --> navigate to the route /game in the GameRouter\n\n        _this3.props.history.push(\"/game\");\n      }).catch(function (err) {\n        if (err.message.match(/Failed to fetch/)) {\n          alert(\"The server cannot be reached. Did you start it?\");\n        } else {\n          alert(\"Something went wrong during the login: \".concat(err.message));\n        }\n      });\n    }\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Username\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"changedusername\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Birthday\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this4.handleInputChange(\"changedbirthday\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this4.saveSettings();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Settings\")))));\n    }\n  }]);\n\n  return Settings;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(Settings);","map":{"version":3,"sources":["/home/lma/SoPra/sopra-fs19-client/src/components/profile/Settings.js"],"names":["React","styled","BaseContainer","getDomain","User","withRouter","Button","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Settings","props","state","username","userid","birthday","changedusername","changedbirthday","console","log","path","localStorage","getItem","status","response","Promise","resolve","alert","reject","Error","statusText","str","text","fetch","method","headers","body","JSON","stringify","token","id","newusername","newbirthday","then","data","setTimeout","history","push","catch","error","password","json","returnedUser","user","setItem","err","message","match","key","value","setState","e","handleInputChange","target","saveSettings","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseContainer } from \"../../helpers/layout\";\nimport { getDomain } from \"../../helpers/getDomain\";\nimport User from \"../shared/models/User\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from \"../../views/design/Button\";\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 375px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.2);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass Settings extends React.Component {\n    /**\n     * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n     * The constructor for a React component is called before it is mounted (rendered).\n     * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n     * These fields are then handled in the onChange() methods in the resp. InputFields\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: null,\n            userid: null,\n            birthday: null,\n\n            changedusername: null,\n            changedbirthday: null,\n\n        };\n    }\n\n\n    saveSettings(){\n\n        console.log(\"settings:update\", this.state);\n        let path=`${getDomain()}/users/` + localStorage.getItem(\"userId\");\n\n        const status = response =>{\n            if(response.status === 204){\n\n                return Promise.resolve(response);\n            }\n            alert(\"Username already taken!\");\n            return Promise.reject(new Error(response.statusText));\n        }\n        const str = response => response.text();\n\n        fetch(path, {\n            method: \"PUT\",\n            // mode : 'no-cors',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                token: localStorage.getItem(\"token\"),\n                id:this.state.userid,\n                username: this.state.newusername,\n                birthday:this.state.newbirthday\n            })\n        })\n\n            .then(status)\n            .then(str)\n            .then(async data =>{\n                await new Promise(resolve => setTimeout(resolve, 100));\n                this.props.history.push(\"/game/dashboard\");\n            })\n\n            .catch(error => {\n                console.log(error);\n            })\n    }\n\n\n\n\n\n\n\n\n\n\n    /**\n     * HTTP POST request is sent to the backend.\n     * If the request is successful, a new user is returned to the front-end and its token is stored in the localStorage.\n     */\n    settings() {\n        fetch(`${getDomain()}/users`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password\n            })\n        })\n            .then(response => response.json())\n            .then(returnedUser => {\n                const user = new User(returnedUser);\n                // store the token into the local storage\n                localStorage.setItem(\"token\", user.token);\n                // user login successfully worked --> navigate to the route /game in the GameRouter\n                this.props.history.push(`/game`);\n            })\n            .catch(err => {\n                if (err.message.match(/Failed to fetch/)) {\n                    alert(\"The server cannot be reached. Did you start it?\");\n                } else {\n                    alert(`Something went wrong during the login: ${err.message}`);\n                }\n            });\n    }\n\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n    handleInputChange(key, value) {\n        // Example: if the key is username, this statement is the equivalent to the following one:\n        // this.setState({'username': value});\n        this.setState({ [key]: value });\n    }\n\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n    componentDidMount() {}\n\n    render() {\n        return (\n            <BaseContainer>\n                <FormContainer>\n                    <Form>\n                        <Label>Username</Label>\n                        <InputField\n                            placeholder=\"Enter here..\"\n                            onChange={e => {\n                                this.handleInputChange(\"changedusername\", e.target.value);\n                            }}\n                        />\n                        <Label>Birthday</Label>\n                        <InputField\n                            placeholder=\"Enter here..\"\n                            onChange={e => {\n                                this.handleInputChange(\"changedbirthday\", e.target.value);\n                            }}\n                        />\n                        <ButtonContainer>\n                            <Button\n                                width=\"50%\"\n                                onClick={() => {\n                                    this.saveSettings();\n                                }}\n                            >\n                                Settings\n                            </Button>\n                        </ButtonContainer>\n                    </Form>\n                </FormContainer>\n            </BaseContainer>\n        );\n    }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(Settings);\n"]},"metadata":{},"sourceType":"module"}